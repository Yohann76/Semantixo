const mongoose = require('mongoose');

// Configuration pour les tests
beforeAll(async () => {
  // Connexion √† une base de donn√©es de test sans authentification
  const mongoUri = process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/semantixo-test';
  
  try {
    await mongoose.connect(mongoUri, {
      // Options pour √©viter les probl√®mes d'authentification
      authSource: 'admin',
      retryWrites: true,
      w: 'majority'
    });
    console.log('‚úÖ Connect√© √† MongoDB de test');
  } catch (error) {
    console.error('‚ùå Erreur de connexion MongoDB de test:', error);
    // Si la connexion √©choue, on utilise une base de donn√©es en m√©moire
    console.log('üîÑ Tentative avec base de donn√©es en m√©moire...');
    try {
      await mongoose.connect('mongodb://localhost:27017/semantixo-test-memory');
      console.log('‚úÖ Connect√© √† MongoDB en m√©moire');
    } catch (memoryError) {
      console.error('‚ùå Impossible de se connecter √† MongoDB:', memoryError);
      console.log('‚ö†Ô∏è Tests sans base de donn√©es...');
    }
  }
});

afterAll(async () => {
  try {
    // Nettoyage et fermeture de la connexion
    if (mongoose.connection.readyState === 1) {
      // Ne pas essayer de supprimer la base de donn√©es si on n'a pas les permissions
      await mongoose.connection.close();
      console.log('‚úÖ Connexion MongoDB ferm√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
});

afterEach(async () => {
  try {
    // Nettoyage des collections apr√®s chaque test
    if (mongoose.connection.readyState === 1) {
      const collections = mongoose.connection.collections;
      for (const key in collections) {
        const collection = collections[key];
        try {
          await collection.deleteMany({});
        } catch (deleteError) {
          console.log(`‚ö†Ô∏è Impossible de nettoyer la collection ${key}:`, deleteError.message);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage des collections:', error);
  }
}); 